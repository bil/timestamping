#!/bin/bash

# verify timestamps of a git repository
# must be executed from base of git repository where .timestamps.json file resides

set -u

COMMIT_LAST=$(git log -1 --oneline --pretty=format:%s)
if [ "$COMMIT_LAST" != "TIMESTAMP COMMIT" ]; then
    printf "%s\n" "ERROR: This is not a timestamp commit."
    exit 1
fi

DIR_LOCAL_BIN=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
source $DIR_LOCAL_BIN/../../../etc/trustedts/tts.source

DIGEST_SIZE=256

# check for Mac
if [ "$(uname)" = "Darwin" ]; then
    CMD_SHA="shasum -a $DIGEST_SIZE"
else
    CMD_SHA="sha${DIGEST_SIZE}sum"
fi

DIR_GIT=$(pwd)
OBJFORMAT=$(git rev-parse --show-object-format)
COMMIT_ID=$(git log --skip 1 -1 --pretty=format:%H)

if [ "$OBJFORMAT" = "sha1" ]; then
    DIGEST=$(printf '%s' "$COMMIT_ID" | $CMD_SHA | cut -c 1-$(($DIGEST_SIZE/4)) )
elif [ "$OBJFORMAT" = "sha256" ]; then
    DIGEST=$COMMIT_ID
fi

DIR_UNPACK=$(mktemp -d /tmp/tsUnpack.XXXXXXX)
cd $DIR_UNPACK
ttsUnpackJSON $DIR_GIT/.timestamps.json

for TSA_idx in $(seq 0 $((${#TSA_names[@]}-1)) ); do

  printf 'Verifying %s:\n' "${TSA_names[$TSA_idx]}"

  # make tmp directory for this tsr
  DIR_TMP=$(mktemp -d /tmp/tsVerify.XXXXXXX)
  cd $DIR_TMP

  # extract certificates from timestamp
  $DIR_BIN/ttsRepCert $DIR_UNPACK/tsReply_${TSA_names[$TSA_idx]}.tsr
  # split cert chain pem into individual certificates
  csplit -s -f tsReply_${TSA_names[$TSA_idx]} -b %02d.pem tsReply_${TSA_names[$TSA_idx]}.pem /END\ CERTIFICATE/+2 {*}
  # delete empty file
  find $DIR_TMP -size 0 -delete
  # delete cert chain pem
  rm tsReply_${TSA_names[$TSA_idx]}.pem

  # generate cert IDs
  openssl rehash ./
  # copy over root CAs, overwriting links to any extracted CA root with these root certs
  cp -a $DIR_CA/* $DIR_TMP

  cd $DIR_UNPACK
  openssl ts -verify -digest $DIGEST \
      -in tsReply_${TSA_names[$TSA_idx]}.tsr \
      -CApath $DIR_TMP 2> >(grep -v "Using configuration from" >&2)

  rm -rf $DIR_TMP

done

rm -rf $DIR_UNPACK
