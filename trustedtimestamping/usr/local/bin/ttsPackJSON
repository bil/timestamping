#!/bin/bash

# requirements: jq, base64

set -e
set -u

DIR_TS=$1

FORMAT="TIMESTAMPS_TRUSTED"
VERSION=0.0.1

DIGEST_SIZE=256

DIR_LOCAL_BIN=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
source $DIR_LOCAL_BIN/../../../etc/trustedts/tts.source

JSON=$(jq ".format = \"$FORMAT\"" <(printf '{}'))
JSON=$(jq ".version = \"$VERSION\"" <(printf '%s' "$JSON"))

# check if hash file of timestamp hash
if [ -f $DIR_TS/sha$DIGEST_SIZE.hash ]; then
    JSON=$(jq ".hash.hash = \"$(<$DIR_TS/sha$DIGEST_SIZE.hash)\"" <(printf '%s' "$JSON"))
    JSON=$(jq ".hash.algorithm = \"SHA$DIGEST_SIZE\"" <(printf '%s' "$JSON"))
fi

# check if hashfile of checksum exists
if compgen -G "$DIR_TS/*.sha$DIGEST_SIZE" > /dev/null; then
    FILE_HASH=$(find $DIR_TS -name "*.sha$DIGEST_SIZE" -exec basename {} .sha$DIGEST_SIZE \;)

    JSON=$(jq ".name = \"$FILE_HASH\"" <(printf '%s' "$JSON"))
    JSON=$(jq ".hashfile = {\"filename\" : \"$FILE_HASH.sha$DIGEST_SIZE\", \"algorithm\" : \"SHA$DIGEST_SIZE\", \"contents\" : \"$(base64 -w 0 < <(<$DIR_TS/$FILE_HASH.sha$DIGEST_SIZE) )\"} " <(printf '%s' "$JSON"))
fi

# check if git hash file exists
if compgen -G "$DIR_TS/sha*.git" > /dev/null; then
    OBJFORMAT=$(find $DIR_TS -name "sha*.git" -exec basename {} .git \;)
    COMMIT_ID=$(<$OBJFORMAT.git)

    JSON=$(jq ".git.commit = \"$COMMIT_ID\"" <(printf '%s' "$JSON"))
    JSON=$(jq ".git.objformat = \"$OBJFORMAT\"" <(printf '%s' "$JSON"))
fi

for TSA_idx in $(seq 0 $((${#TSA_names[@]}-1)) ); do

    CRLs=()
    for crl in $DIR_TS/tsCRL_${TSA_names[$TSA_idx]}*.crl; do
        CRLs+=($(base64 -w 0 < <(<$crl) ))
    done
    CRL_JSON=$(jq -n --arg array "${CRLs[*]}" '$array| split(" ")')

    STR_TSREP=$(base64 -w 0 < <(<$DIR_TS/tsReply_${TSA_names[$TSA_idx]}.tsr) )
    STR_CA=$(base64 -w 0 < <(<$DIR_CA/${TSA_names[$TSA_idx]}CA.pem) )

    JSON=$(jq ".timestamps += [{ \"authority\" : \"${TSA_names[$TSA_idx]}\", \"url\" : \"${TSA_urls[$TSA_idx]}\", \"reply\" : \"$STR_TSREP\", \"ca\" : \"$STR_CA\", \"crls\" : $CRL_JSON }]" <(printf '%s' "$JSON"))
done

if [ -v FILE_HASH ]; then
    FILE_SUFFIX="_$FILE_HASH"
else
    FILE_SUFFIX=""
fi
printf '%s' "$JSON" > timestamps$FILE_SUFFIX.json
