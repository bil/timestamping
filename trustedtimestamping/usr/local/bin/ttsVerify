#!/bin/bash

# verifies a timestamps json file against the candiate originating file/directory
# output: stdout responses from openssl verify and tsVerify.json
#
# different input forms, all second arguments are optional, assumes pwd if omotted
# verify a file: ttsVerify <path to candidate file/directory> [path to timestamp replies (.tsr)]
# verify a digest: ttsVerify <64 characters> [path to timestamp replies (.tsr)]
# verify a git repo: ttsVerify git [path to git repo]

set -u

if [ $# -eq 0 ]; then
    printf "ERROR: no arguments pased.\n"
    exit 1
fi

DIR_LOCAL_BIN=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
source $DIR_LOCAL_BIN/../../../etc/trustedts/tts.source

DIGEST_SIZE=256

# check for Mac
if [ "$(uname)" = "Darwin" ]; then
    CMD_CSPLIT=gcsplit
    CMD_DATE=("date" "-jf" "%b %e %H:%M:%S %Y %Z")
    CMD_SHA="shasum -a $DIGEST_SIZE"
else
    CMD_CSPLIT=csplit
    CMD_DATE=("date" "-d")
    CMD_SHA="sha${DIGEST_SIZE}sum"
fi

if [ $1 = "git" ]; then
    VERIFY=git
elif [ ${#1} -eq 64 ] && [[ "$1" =~ ^[0-9A-Fa-f]+$ ]]; then
    VERIFY=digest
else
    VERIFY=data
fi

if [ $VERIFY = "git" ]; then
    if [ $# -ge 2 ]; then
        cd $2
    fi
    DIR_ORIGIN=$(git rev-parse --show-toplevel)
    COMMIT_LAST=$(git log -1 --oneline --pretty=format:%s)
    if [ "$COMMIT_LAST" != "TIMESTAMP COMMIT" ]; then
        printf "%s\n" "ERROR: This is not a timestamp commit."
        exit 1
    fi

    OBJFORMAT=$(git rev-parse --show-object-format)
    COMMIT_ID=$(git log --skip 1 -1 --pretty=format:%H)

    if [ "$OBJFORMAT" = "sha1" ]; then
        DIGEST=$(printf '%s' "$COMMIT_ID" | $CMD_SHA | cut -c 1-$(($DIGEST_SIZE/4)) )
    elif [ "$OBJFORMAT" = "sha256" ]; then
        DIGEST=$COMMIT_ID
    fi

    DIR_TS=$(mktemp -d /tmp/tsUnpack.XXXXXXX)
    cd $DIR_TS
    ttsUnpackJSON $DIR_ORIGIN/.timestamps.json

fi

if [ $VERIFY = "digest" ]; then
    DIGEST=$1
    if [ $# -ge 2 ]; then
        DIR_TS=$(realpath $2)
    else
        DIR_TS=$(pwd)
    fi
    DIR_ORIGIN=$(pwd)
fi

if [ $VERIFY = "data" ]; then

    PATH_ABS=$(realpath $1)
    NAME_DATA=$(basename $PATH_ABS)
    DIR_DATA=$(dirname $PATH_ABS)
    if [ $# -ge 2 ]; then
        DIR_TS=$(realpath $2)
    else
        DIR_TS=$(pwd)
    fi
    DIR_ORIGIN=$(pwd)

    cd "$DIR_DATA"
    if [ -f "$PATH_ABS" ]; then
        DIGEST_FILE=$($CMD_SHA "$NAME_DATA")
    elif [ -d "$PATH_ABS" ]; then
        DIGEST_FILE="$(find "$NAME_DATA" -type f | xargs -n 1 $CMD_SHA | sort)"
    else
        printf "Error: Path was not file nor directory\n"
        exit 1
    fi

    DIGEST=$(printf "%s\n" "$DIGEST_FILE" | $CMD_SHA | cut -c 1-$(($DIGEST_SIZE/4)) )
fi


# get TSA server name list from .tsr reply files
TSAs=()
for f in $DIR_TS/*.tsr; do
    fbase=$(basename $f)
    TSAs+=($(echo $fbase | cut -d'_' -f 2 | cut -d '.' -f 1))
done

V_STATUS=()
V_ERR=()
TS_HASH_ALG=()
TS_HASH_DIGEST=()
TS_EPOCH=()
for TSA_idx in $(seq 0 $((${#TSAs[@]}-1)) ); do

    TS_R=$(openssl ts -reply -text -in $DIR_TS/tsReply_${TSAs[$TSA_idx]}.tsr \
        2> >(grep -v "Using configuration from" >&2) )
    TS_HASH_ALG+=($(printf "%s" "$TS_R" | grep "Hash Algorithm" | cut -c 17- | tr -d " \n" | tr "[:lower:]" "[:upper:]"))
    TS_HASH_DIGEST+=($(printf "%s" "$TS_R" | grep "Message data" -A 2 | tail -2 | cut -c 12-58 | tr -d " \-\n"))
    TS_TIME="$(printf "%s" "$TS_R" | grep "Time stamp" | cut -c 13-)"
    # throw out milliseconds if present
    TS_TIME=$(echo $TS_TIME | sed -E 's/([0-9]{2}:[0-9]{2}:[0-9]{2})\.[0-9]*/\1/g')
    TS_EPOCH+=($("${CMD_DATE[@]}" "$TS_TIME" +%s))

    printf 'Verifying %s: ' "${TSAs[$TSA_idx]}"

    # make tmp directory for this tsr
    DIR_TMP=$(mktemp -d /tmp/tsVerify.XXXXXXX)
    cd $DIR_TMP

    # extract certificates from timestamp
    $DIR_BIN/ttsRepCert $DIR_TS/tsReply_${TSAs[$TSA_idx]}.tsr
    # split cert chain pem into individual certificates
    $CMD_CSPLIT -s -f tsReply_${TSAs[$TSA_idx]} -b %02d.pem tsReply_${TSAs[$TSA_idx]}.pem /END\ CERTIFICATE/+2 {*}
    # delete empty file
    find $DIR_TMP -size 0 -delete
    # delete cert chain pem
    rm tsReply_${TSAs[$TSA_idx]}.pem

    # generate cert IDs
    openssl rehash ./
    # copy over root CAs, overwriting links to any extracted CA root with these root certs
    cp -a $DIR_CA/* $DIR_TMP

    VERIFICATION_STR=$(openssl ts -verify -digest $DIGEST \
        -in $DIR_TS/tsReply_${TSAs[$TSA_idx]}.tsr \
        -CApath $DIR_TMP 2> >(grep -v "Using configuration from" > $DIR_TMP/err.log))
    VERIFICATION=($VERIFICATION_STR)
    V_STATUS+=(${VERIFICATION[1]})
    V_ERR+=("$(<$DIR_TMP/err.log)")

    printf "%s \n" ${VERIFICATION[1]}
    if [ "${VERIFICATION[1]}" = "FAILED" ]; then
        printf "ERROR: %s\n" "$(<$DIR_TMP/err.log)"
    fi

    rm -rf $DIR_TMP

done

# generate verification json
VJ=$(jq -n '[]')
for TSA_idx in $(seq 0 $((${#TSAs[@]}-1)) ); do
    VJ=$(jq --arg tsa "${TSAs[$TSA_idx]}" --arg status "${V_STATUS[$TSA_idx]}" --argjson epoch "${TS_EPOCH[$TSA_idx]}" --arg alg "${TS_HASH_ALG[$TSA_idx]}" --arg digest "${TS_HASH_DIGEST[$TSA_idx]}" \
            '. + [{"tsa" : $tsa, "status" : $status, "time" : $epoch, "hash" : {"digest" : $digest, "algorithm" : $alg}}]' < <(printf "%s" "$VJ"))
    if [ "${V_STATUS[$TSA_idx]}" = "FAILED" ]; then
        VJ=$(jq --argjson idx "$TSA_idx" --arg error "${V_ERR[$TSA_idx]}" '.[$idx].error = $error' < <(printf "%s" "$VJ"))
    fi
done

printf "%s" "$VJ" > $DIR_ORIGIN/tsVerify.json

if [ $VERIFY = 'git' ]; then
    rm -r $DIR_TS
fi
